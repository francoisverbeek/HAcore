"""Sensors for the sunsynk web api."""

import decimal
import logging

from homeassistant.components.sensor import (
    SensorDeviceClass,
    SensorEntity,
    SensorStateClass,
)
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import PERCENTAGE, UnitOfEnergy, UnitOfPower
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.update_coordinator import CoordinatorEntity

from . import DOMAIN
from .coordinator import PlantUpdateCoordinator

_LOGGER = logging.getLogger(__name__)


async def async_setup_entry(
    hass: HomeAssistant,
    entry: ConfigEntry,
    async_add_entities: AddEntitiesCallback,  # noqa: F821
) -> None:
    """Set up Abode binary sensor devices."""
    data: PlantUpdateCoordinator = hass.data[DOMAIN][entry.entry_id]

    async_add_entities(
        [
            BatteryPowerGauge(data),
            LoadPowerGauge(data),
            GridPowerGauge(data),
            StateOfChargeGauge(data),
            PVPowerGauge(data),
            PVEnergyAccumulator(data),
            LoadAccumulator(data),
            GridExportAccumulator(data),
            GridImportAccumulator(data),
            BatteryChargeAccumulator(data),
            BatteryDischargeAccumulator(data),
        ]
    )


class SunSynkApiSensor(CoordinatorEntity, SensorEntity):
    """Parent class for sunsynk api exposing sensors.

    The sensors expose the sum of the power across all inverters
    for plants that have more than one inverter.
    State of charge is normally shared between inverters, so this will take
    the maximum of the state of charge.
    """

    _attr_of_interest: str = (
        ""  # this extra attribute is used as an indirection into the Plant object model
    )

    def __init__(self, coordinator) -> None:
        """Initialise the common elements for sunsynk web api sensors."""
        CoordinatorEntity.__init__(self, coordinator, context=coordinator)
        self.coordinator: PlantUpdateCoordinator = coordinator

    @callback
    def _handle_coordinator_update(self) -> None:
        """Handle updated data from the coordinator."""
        if self.coordinator.cache is not None:
            self.native_value = sum(
                decimal.Decimal(getattr(i, self._attr_of_interest))
                for i in self.coordinator.cache.plants
            )
        else:
            _LOGGER.debug("Not updating sensor as coordinator cache is empty. ")
        self.async_write_ha_state()


class BatteryPowerGauge(SunSynkApiSensor):
    """A gauge for battery power."""

    _attr_device_class = SensorDeviceClass.POWER
    _attr_native_unit_of_measurement = UnitOfPower.WATT
    _attr_of_interest = "battery_power"
    _attr_name = "Solar supply battery power (instantaneous)"


class LoadPowerGauge(SunSynkApiSensor):
    "A gauge for the load on all inverters."

    _attr_device_class = SensorDeviceClass.POWER
    _attr_native_unit_of_measurement = UnitOfPower.WATT
    _attr_of_interest = "load_power"
    _attr_name = "Total inverter load (instantaneous)"


class GridPowerGauge(SunSynkApiSensor):
    """A gauge for the load to or from the grid."""

    _attr_device_class = SensorDeviceClass.POWER
    _attr_native_unit_of_measurement = UnitOfPower.WATT
    _attr_of_interest = "grid_power"
    _attr_name = "Load to or from the grid (instantaneous)"


class PVPowerGauge(SunSynkApiSensor):
    """A gauge for the power from generator (typically solar panels)."""

    _attr_device_class = SensorDeviceClass.POWER
    _attr_native_unit_of_measurement = UnitOfPower.WATT
    _attr_of_interest = "pv_power"
    _attr_name = "Power generated by solar panels (instantaneous)"


class StateOfChargeGauge(SunSynkApiSensor):
    """A gauge to track batter charge."""

    _attr_device_class = SensorDeviceClass.BATTERY
    _attr_native_unit_of_measurement = PERCENTAGE
    _attr_of_interest = "state_of_charge"
    _attr_name = "Solar battery charge"

    @callback
    def _handle_coordinator_update(self) -> None:
        """Handle updated data from the coordinator."""
        if self.coordinator.cache is not None:
            self.native_value = max(
                getattr(i, self._attr_of_interest)
                for i in self.coordinator.cache.plants
            )
        else:
            _LOGGER.debug(
                "not updating battery state of charge as coordinator is not refreshed yet"
            )
        self.async_write_ha_state()


class PVEnergyAccumulator(SunSynkApiSensor):
    """Accumulated energy generated (typically by solar panels)."""

    _attr_device_class = SensorDeviceClass.ENERGY
    _attr_state_class = SensorStateClass.TOTAL_INCREASING
    _attr_native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR
    _attr_of_interest = "acc_pv"
    _attr_name = "Total PV generated energy"


class LoadAccumulator(SunSynkApiSensor):
    """Total energy consumed through the inverters."""

    _attr_device_class = SensorDeviceClass.ENERGY
    _attr_state_class = SensorStateClass.TOTAL_INCREASING
    _attr_native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR
    _attr_of_interest = "acc_load"
    _attr_name = "Total energy consumed"


class GridImportAccumulator(SunSynkApiSensor):
    """Total energy imported from the grid."""

    _attr_device_class = SensorDeviceClass.ENERGY
    _attr_state_class = SensorStateClass.TOTAL_INCREASING
    _attr_native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR
    _attr_of_interest = "acc_grid_import"
    _attr_name = "Total energy imported from the grid"


class GridExportAccumulator(SunSynkApiSensor):
    """Total energy exported to the grid."""

    _attr_device_class = SensorDeviceClass.ENERGY
    _attr_state_class = SensorStateClass.TOTAL_INCREASING
    _attr_native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR
    _attr_of_interest = "acc_grid_export"
    _attr_name = "Total energy exported to the grid"


class BatteryChargeAccumulator(SunSynkApiSensor):
    """Total energy injected into the batteries."""

    _attr_device_class = SensorDeviceClass.ENERGY
    _attr_state_class = SensorStateClass.TOTAL_INCREASING
    _attr_native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR
    _attr_of_interest = "acc_battery_charge"
    _attr_name = "Accumulated energy charged into the batteries"


class BatteryDischargeAccumulator(SunSynkApiSensor):
    """Total energy provided by the batteries."""

    _attr_device_class = SensorDeviceClass.ENERGY
    _attr_state_class = SensorStateClass.TOTAL_INCREASING
    _attr_native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR
    _attr_of_interest = "acc_battery_discharge"
    _attr_name = "Accumulated energy discharged from the batteries"
